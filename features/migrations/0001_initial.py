# Generated by Django 4.1.5 on 2023-02-09 04:06

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('dashboards', '0001_initial'),
        ('solarrms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_title', models.CharField(blank=True, max_length=100, null=True)),
                ('feature_description', models.CharField(blank=True, max_length=100, null=True)),
                ('feature_columns', models.CharField(blank=True, help_text='No of Days in case of PDF', max_length=100, null=True)),
                ('feature_chart_type', models.CharField(blank=True, choices=[('BAR', 'BAR'), ('LINE', 'LINE')], help_text='BAR/LINE', max_length=100, null=True)),
                ('feature_unit', models.CharField(blank=True, choices=[('Power', 'kW')], help_text='kw/cm/degree', max_length=100, null=True)),
                ('feature_type', models.CharField(blank=True, max_length=100, null=True)),
                ('feature_order', models.SmallIntegerField(default=0, help_text='order number in feature sequence')),
            ],
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('enabled', models.BooleanField(default=True)),
                ('function_path', models.CharField(help_text='A function that returns data for this feature', max_length=100)),
                ('data_key_name', models.CharField(max_length=100)),
                ('include_table', models.BooleanField(default=False, help_text='whether this feature should be included in the plants table or not')),
            ],
        ),
        migrations.CreateModel(
            name='FeatureCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('enabled', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='FeatureOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order_number', models.PositiveIntegerField()),
                ('is_fixed', models.BooleanField(default=False)),
                ('features', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='features.feature')),
            ],
        ),
        migrations.CreateModel(
            name='UserTableWidgetsConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_scope', models.CharField(choices=[('portfolio', 'PORTFOLIO'), ('plant', 'PLANT')], max_length=20)),
                ('feature_columns', models.ManyToManyField(related_name='feature_columns', through='features.FeatureOrder', to='features.feature')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'config_scope')},
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_plans', to='dashboards.dashboard')),
                ('features', models.ManyToManyField(related_name='subscriptions', to='features.feature')),
            ],
        ),
        migrations.CreateModel(
            name='RoleAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('CEO', 'CEO'), ('O&M_MANAGER', 'O&M_MANAGER'), ('SITE_ENGINEER', 'SITE_ENGINEER'), ('CLIENT_CEO', 'CLIENT_CEO'), ('CLIENT_O&M_MANAGER', 'CLIENT_O&M_MANAGER'), ('CLIENT_SITE_ENGINEER', 'CLIENT_SITE_ENGINEER')], max_length=100)),
                ('dg_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_definitions', to='dashboards.dataglenclient')),
                ('features', models.ManyToManyField(related_name='access', to='features.feature')),
            ],
        ),
        migrations.AddField(
            model_name='featureorder',
            name='user_table_widgets',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='features.usertablewidgetsconfig'),
        ),
        migrations.AddField(
            model_name='feature',
            name='feature_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features', related_query_name='feature', to='features.featurecategory'),
        ),
        migrations.CreateModel(
            name='DGClientSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dg_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to='dashboards.dataglenclient')),
                ('subscription_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clients', to='features.subscriptionplan')),
            ],
        ),
        migrations.CreateModel(
            name='CustomReportFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('role', models.CharField(choices=[('CEO', 'CEO'), ('O&M_MANAGER', 'O&M_MANAGER'), ('SITE_ENGINEER', 'SITE_ENGINEER'), ('CLIENT_CEO', 'CLIENT_CEO'), ('CLIENT_O&M_MANAGER', 'CLIENT_O&M_MANAGER'), ('CLIENT_SITE_ENGINEER', 'CLIENT_SITE_ENGINEER')], max_length=100)),
                ('role_default', models.BooleanField(default=False)),
                ('report_type', models.CharField(choices=[('DAILY', 'DAILY'), ('MONTHLY', 'MONTHLY'), ('YEARLY', 'YEARLY')], help_text='Daily/Monthly/Yearly', max_length=100)),
                ('custom_features', models.ManyToManyField(blank=True, null=True, related_name='custom_report', to='features.customfeature')),
                ('dg_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_report', to='dashboards.dataglenclient')),
                ('user', models.ManyToManyField(related_name='custom_report', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='customfeature',
            name='features',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_feature', to='features.feature'),
        ),
        migrations.CreateModel(
            name='UserSolarPlantWidgetsConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_name', models.CharField(max_length=100)),
                ('plants', models.ManyToManyField(related_name='plants', to='solarrms.solarplant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'config_name')},
            },
        ),
    ]
