import sys
import itertools

PY3 = sys.version_info >= (3,)
PY2 = not PY3

if PY2:
    str = str
    import builtins as builtins
    import configparser
    from io import StringIO
    BytesIO = StringIO
    func_code = lambda o: o.__code__
    func_globals = lambda o: o.__globals__
    im_func = lambda o: o.__func__
    from html.entities import name2codepoint
    import http.client
    from http.server import HTTPServer
    from http.server import SimpleHTTPRequestHandler
    from http.server import BaseHTTPRequestHandler
    iteritems = lambda o: iter(o.items())
    long_type = int
    maxsize = sys.maxsize
    chr = chr
    str = str
    bytes = str
    from urllib.request import url2pathname, pathname2url
    from urllib.parse import splittag
    import urllib.request, urllib.error, urllib.parse
    from urllib.request import urlopen
    from urllib.error import HTTPError, URLError
    from urllib.parse import unquote, splituser
    from urllib.parse import urlparse, urlunparse, urljoin, urlsplit, urlunsplit
    filterfalse = itertools.ifilterfalse

    exec("""def reraise(tp, value, tb=None):
    raise tp, value, tb""")

if PY3:
    str = str
    import builtins
    import configparser as ConfigParser
    from io import StringIO, BytesIO
    func_code = lambda o: o.__code__
    func_globals = lambda o: o.__globals__
    im_func = lambda o: o.__func__
    from html.entities import name2codepoint
    import http.client as httplib
    from http.server import HTTPServer, SimpleHTTPRequestHandler
    from http.server import BaseHTTPRequestHandler
    iteritems = lambda o: list(o.items())
    long_type = int
    maxsize = sys.maxsize
    chr = chr
    str = str
    bytes = bytes
    from urllib.error import HTTPError, URLError
    import urllib.request as urllib2
    from urllib.request import urlopen, url2pathname, pathname2url
    from urllib.parse import (
        urlparse, urlunparse, unquote, splituser, urljoin, urlsplit,
        urlunsplit, splittag,
    )
    filterfalse = itertools.filterfalse

    def reraise(tp, value, tb=None):
        if value.__traceback__ is not tb:
            raise value.with_traceback(tb)
        raise value
