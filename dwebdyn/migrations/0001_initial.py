# Generated by Django 4.1.5 on 2023-02-09 04:38

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='WebdynClient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the client', max_length=20, unique=True)),
                ('slug', models.SlugField(max_length=20, unique=True)),
                ('active', models.BooleanField(default=False, help_text='If this client is active and should be allowed to see data')),
                ('api_key', models.CharField(blank=True, help_text="Client's API key", max_length=50, null=True, unique=True)),
                ('ftp_dir', models.CharField(blank=True, help_text='FTP directory path', max_length=100, null=True, unique=True)),
                ('archived_dir', models.CharField(blank=True, help_text='Archived directory path', max_length=100, null=True, unique=True)),
                ('invalid_dir', models.CharField(blank=True, help_text='Invalid directory path', max_length=100, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='WebdynGateway',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=20)),
                ('active', models.BooleanField(default=True)),
                ('installed_location', models.CharField(max_length=100)),
                ('heartbeat_source_key', models.CharField(help_text='DGC source key for heartbeats', max_length=50)),
                ('metadata_source_key', models.CharField(help_text='DGC source key for metadata', max_length=50)),
                ('client', models.ForeignKey(help_text="Client's name", on_delete=django.db.models.deletion.CASCADE, related_name='gateways', related_query_name='client', to='dwebdyn.webdynclient', to_field='name')),
            ],
        ),
        migrations.CreateModel(
            name='ModbusDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('modbus_address', models.CharField(help_text='Modbus address that will be present in the data file', max_length=20)),
                ('fields_template', models.CharField(choices=[('DELTA', 'DELTA'), ('SUNGROW', 'SUNGROW'), ('SECURE_ELITE_440_446', 'Secure_Elite_440_446'), ('SECURE_ELITE_440_443', 'Secure_Elite_440_443'), ('SCHNEIDER_EM6436', 'Schneider_EM6436'), ('SCHNEIDER_EM6430', 'Schneider_EM6430'), ('SCHNEIDER_EM6400', 'Schneider_EM6400'), ('HENSEL', 'Hensel'), ('MODBUS_SATEC', 'Modbus_Satec'), ('ABB', 'ABB'), ('ELMEASURE', 'Elmeasure'), ('SMA', 'SMA'), ('MODBUS_PYRANOMETER', 'MODBUS_Pyranometer'), ('WMS', 'WMS'), ('LNT', 'LNT'), ('MODBUS_MICROLYTE', 'MODBUS_Microlyte'), ('RAYCHEM_SCB', 'Raychem_SCB'), ('IDSITE_SCHNEIDER_CONEXT_CORE_XC', 'IDSITE_SCHNEIDER_CONEXT_CORE_XC'), ('SCB_MS', 'SCB_MS'), ('TRINITY_MFM', 'TRINITY_MFM'), ('MODBUS_INV_HUAWEI_33K_SUN2000', 'MODBUS_INV_HUAWEI_33k_SUN2000'), ('STP_25', 'STP_25'), ('SMA_STP_60_IM', 'SMA_STP_60_IM'), ('MODBUS_IRRADIANCE', 'Modbus_Irradiance'), ('STP_25_KMRL_WORKSHOP', 'STP_25_KMRL_WORKSHOP'), ('WAAREE', 'WAAREE'), ('ZEVERSOLAR', 'Zeversolar'), ('TATA', 'Tata')], help_text='Template that will decide the parameters to be picked up', max_length=50)),
                ('source_key', models.CharField(help_text='DGC source key', max_length=50)),
                ('active', models.BooleanField(default=True, help_text='If this device is active and data should be parsed')),
                ('gateway_device', models.ForeignKey(help_text='Modbus devices installed with the gateway', on_delete=django.db.models.deletion.CASCADE, related_name='modbus_devices', related_query_name='gateway', to='dwebdyn.webdyngateway')),
            ],
        ),
        migrations.CreateModel(
            name='IODevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_id', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8)])),
                ('stream_name', models.CharField(help_text='DGC stream name', max_length=50)),
                ('source_key', models.CharField(help_text='DGC source key', max_length=50)),
                ('manufacturer', models.CharField(blank=True, max_length=50, null=True)),
                ('output_range', models.CharField(choices=[('4-20mA', '4-20mA'), ('0-10V', '0-10V')], help_text='sensor range', max_length=20)),
                ('lower_bound', models.FloatField(help_text='lower bound')),
                ('upper_bound', models.FloatField(help_text='upper bound')),
                ('coefficient_A', models.FloatField(blank=True, null=True)),
                ('coefficient_B', models.FloatField(blank=True, null=True)),
                ('multiplicationFactor', models.FloatField(default=1, help_text='Multiplication Factor')),
                ('active', models.BooleanField(default=True, help_text='If this device is active and data should be parsed')),
                ('gateway_device', models.ForeignKey(help_text='IO devices installed with the gateway', on_delete=django.db.models.deletion.CASCADE, related_name='io_devices', related_query_name='gateway', to='dwebdyn.webdyngateway')),
            ],
        ),
        migrations.CreateModel(
            name='InvertersDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(help_text="Inverter's identifier that will be present in the data file", max_length=20)),
                ('fields_template', models.CharField(choices=[('DELTA', 'DELTA'), ('SUNGROW', 'SUNGROW'), ('SMA', 'SMA'), ('SMA_WR10TL09', 'SMA_WR10TL09'), ('SMA_WR10TL11', 'SMA_WR10TL11'), ('SMA_WR10TL12', 'SMA_WR10TL12'), ('SMA_WR7KRP04', 'SMA_WR7KRP04'), ('SMA_WR7KRP07', 'SMA_WR7KRP07'), ('SMA_WR7KRP12', 'SMA_WR7KRP12'), ('Kaco: Powador', 'Kaco: Powador'), ('Kaco: Powador: Extended', 'Kaco: Powador: Extended'), ('WD008C1B_INV_WRHM6Y95', 'WD008C1B_INV_WRHM6Y95'), ('REFUSOL', 'REFUSOL')], help_text='Template that will decide the parameters to be picked up', max_length=30)),
                ('source_key', models.CharField(help_text='DGC source key', max_length=50)),
                ('active', models.BooleanField(default=True, help_text='If this device is active and data should be parsed')),
                ('gateway_device', models.ForeignKey(help_text='Inverter devices installed with the gateway', on_delete=django.db.models.deletion.CASCADE, related_name='inverter_devices', related_query_name='gateway', to='dwebdyn.webdyngateway')),
            ],
        ),
    ]
