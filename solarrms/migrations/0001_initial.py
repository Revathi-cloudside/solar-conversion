# Generated by Django 4.1.5 on 2023-02-03 11:49

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('errors', '0001_initial'),
        ('dataglen', '0001_initial'),
        ('dashboards', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AJB',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('manufacturer', models.CharField(max_length=100)),
                ('displayName', models.CharField(max_length=100)),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='EnergyMeter',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('manufacturer', models.CharField(max_length=100)),
                ('model', models.CharField(blank=True, help_text='Model of the weather Sensor', max_length=100, null=True)),
                ('displayName', models.CharField(max_length=100)),
                ('modbus_address', models.CharField(blank=True, help_text='modbus address of inverter', max_length=100, null=True)),
                ('energy_calculation', models.BooleanField(default=True, help_text='whether this meter should be considered for energy calculation')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='Feeder',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('manufacturer', models.CharField(max_length=100)),
                ('displayName', models.CharField(max_length=100)),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='GatewaySource',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('isVirtual', models.BooleanField(default=False)),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='IndependentInverter',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('manufacturer', models.CharField(help_text='Manufacturer name', max_length=100)),
                ('model', models.CharField(blank=True, help_text='Model of the inverter', max_length=100)),
                ('displayName', models.CharField(help_text='The display name of the inverter end users', max_length=100)),
                ('orientation', models.CharField(blank=True, choices=[('NORTH', 'NORTH'), ('SOUTH', 'SOUTH'), ('EAST', 'EAST'), ('WEST', 'WEST'), ('SOUTH-WEST', 'SOUTH-WEST'), ('EAST-WEST', 'EAST-WEST')], help_text='Direction of the inverter', max_length=100, null=True)),
                ('total_capacity', models.FloatField(blank=True, help_text='Total capacity of the inverter', null=True)),
                ('actual_capacity', models.FloatField(blank=True, help_text='Actual capacity of the inverter', null=True)),
                ('no_of_strings', models.IntegerField(blank=True, help_text='No of strings for this inverter', null=True)),
                ('string_capacity', models.FloatField(blank=True, help_text='capacity of every string', null=True)),
                ('number_of_mppts', models.IntegerField(blank=True, help_text='No of mppt for this inverter', null=True)),
                ('serial_number', models.CharField(blank=True, help_text='Manufacturer name', max_length=100, null=True)),
                ('modbus_address', models.CharField(blank=True, help_text='modbus address of inverter', max_length=100, null=True)),
                ('tilt_angle', models.FloatField(blank=True, help_text='Tilt Angle of inverter panels', null=True)),
                ('compute_irradiance', models.BooleanField(default=False, help_text='whether irradiace should be computed for this inverter using tilt angle')),
                ('energy_meter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='independent_inverter_units', to='solarrms.energymeter')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='Inverter',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('manufacturer', models.CharField(max_length=100)),
                ('displayName', models.CharField(max_length=100)),
                ('energy_meter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='inverter_units', to='solarrms.energymeter')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='IOSensorField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=20)),
                ('ain_number', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8)], default=False)),
                ('stream_type', models.CharField(choices=[('IRRADIATION', 'IRRADIATION'), ('AMBIENT_TEMPERATURE', 'AMBIENT_TEMPERATURE'), ('MODULE_TEMPERATURE', 'MODULE_TEMPERATURE'), ('WINDSPEED', 'WINDSPEED'), ('WIND_DIRECTION', 'WIND_DIRECTION')], default=False, max_length=50)),
                ('tilt', models.FloatField(blank=True, help_text='title angle', null=True)),
                ('orientation', models.FloatField(blank=True, help_text='sensor orientation', null=True)),
                ('output_range', models.CharField(choices=[('4-20mA', '4-20mA'), ('0-10V', '0-10V')], help_text='sensor range', max_length=20)),
                ('lower_bound', models.FloatField(help_text='lower bound')),
                ('upper_bound', models.FloatField(help_text='upper bound')),
            ],
        ),
        migrations.CreateModel(
            name='MPPT',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('order', models.IntegerField(blank=True, help_text='Order of the MPPT', null=True)),
                ('strings_per_mppt', models.IntegerField(blank=True, help_text='No of strings per mppt', null=True)),
                ('modules_per_string', models.IntegerField(blank=True, help_text='No of modules per string', null=True)),
                ('independent_inverter', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mppt_units', to='solarrms.independentinverter')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='PlantMetaSource',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('sending_aggregated_power', models.BooleanField(default=False)),
                ('sending_aggregated_energy', models.BooleanField(default=False)),
                ('energy_meter_installed', models.BooleanField(default=False)),
                ('inverters_sending_daily_generation', models.BooleanField(default=True)),
                ('inverters_sending_total_generation', models.BooleanField(default=False)),
                ('meter_power', models.BooleanField(default=False)),
                ('PV_panel_area', models.FloatField(default=0, help_text='Total PV area of plant in m2', null=True)),
                ('PV_panel_efficiency', models.FloatField(blank=True, default=0, help_text='Efficiency of the PV plant', null=True)),
                ('panel_capacity', models.FloatField(blank=True, default=0, help_text='capacity of panel', null=True)),
                ('panel_technology', models.CharField(blank=True, default=0, help_text='panel type Ex: monocrystalline, polycrystalline etc.', max_length=100, null=True)),
                ('panel_manufacturer', models.CharField(blank=True, help_text='Manufacturer of panels', max_length=100, null=True)),
                ('model_number', models.CharField(blank=True, help_text='model of panels', max_length=100, null=True)),
                ('no_of_panels', models.IntegerField(blank=True, help_text='number of panels installed in the plant', null=True)),
                ('ws_tilt_angle', models.FloatField(blank=True, help_text='Tilt Angle of Weather Station', null=True)),
                ('operations_start_time', models.CharField(default='06:30:00', help_text='Plant operations start time', max_length=100)),
                ('operations_end_time', models.CharField(default='18:30:00', help_text='Plant operations end time', max_length=100)),
                ('calculate_hourly_pr', models.BooleanField(default=True)),
                ('tickets_enabled', models.BooleanField(default=False)),
                ('dc_loss_enabled', models.BooleanField(default=False)),
                ('conversion_loss_enabled', models.BooleanField(default=True)),
                ('ac_loss_enabled', models.BooleanField(default=False)),
                ('energy_from_power', models.BooleanField(default=False)),
                ('irradiation_data', models.BooleanField(default=True, help_text='Are we getting the irradiation data')),
                ('energy_calculation_device', models.CharField(choices=[('PLANT_META', 'PLANT_META'), ('INVERTER_ENERGY', 'INVERTER_ENERGY'), ('INVERTER_POWER', 'INVERTER_POWER'), ('ENERGY_METER', 'ENERGY_METER')], default='INVERTER_ENERGY', help_text='Device which should be used for energy calculation', max_length=100)),
                ('energy_calculation_stream', models.CharField(choices=[('TOTAL_PLANT_ENERGY', 'TOTAL_PLANT_ENERGY'), ('DAILY_PLANT_ENERGY', 'DAILY_PLANT_ENERGY'), ('TOTAL_YIELD', 'TOTAL_YIELD'), ('DAILY_YIELD', 'DAILY_YIELD'), ('ACTIVE_POWER', 'ACTIVE_POWER'), ('Wh_RECEIVED', 'Wh_RECEIVED'), ('Wh_DELIVERED', 'Wh_DELIVERED'), ('KWH', 'KWH'), ('kWhT(I)', 'kWhT(I)'), ('Wh_FINAL', 'Wh_FINAL')], default='TOTAL_YIELD', help_text='Stream which should be used to get the data for energy calculation', max_length=100)),
                ('energy_calculation_stream_unit', models.CharField(choices=[('kWh', 'kWh'), ('kW', 'kW'), ('MWH', 'MWH'), ('MW', 'MW'), ('Wh', 'Wh'), ('W', 'W')], default='kWH', help_text='Unit in which we are getting the data', max_length=100)),
                ('data_frequency', models.IntegerField(blank=True, help_text='Frequency at which we are getting the data', null=True)),
                ('plant_type', models.CharField(choices=[('ROOFTOP', 'ROOFTOP'), ('UTILITY', 'UTILITY')], default='ROOFTOP', help_text='What kind of plant is it', max_length=100)),
                ('installer_type', models.CharField(choices=[('EPC', 'EPC'), ('IPP', 'IPP')], default='IPP', help_text='What kind of installers are they', max_length=100)),
                ('binning_interval', models.IntegerField(blank=True, help_text='binning interval in seconds.', null=True)),
                ('gateway_manufacturer', models.CharField(choices=[('Webdyn', 'Webdyn'), ('Soekris', 'Soekris'), ('Atoll', 'Atoll'), ('DelRemo', 'DelRemo'), ('DataGlen', 'DataGlen')], default='DataGlen', help_text='gateway provider', max_length=50)),
                ('dsm_enabled', models.BooleanField(default=False, help_text='Boolean parameter to determine if DSM tab should be enabled or not.')),
                ('prediction_enabled', models.BooleanField(default=True, help_text='Boolean parameter to determine if prediction needs to be run for this plant..')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='SolarErrorField',
            fields=[
                ('errorfield_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='errors.errorfield')),
                ('displayName', models.CharField(max_length=100)),
                ('fieldType', models.CharField(choices=[('INPUT', 'INPUT'), ('OUTPUT', 'OUTPUT'), ('STATUS', 'STATUS'), ('ERROR', 'ERROR')], max_length=20)),
            ],
            bases=('errors.errorfield',),
        ),
        migrations.CreateModel(
            name='SolarField',
            fields=[
                ('field_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.field')),
                ('displayName', models.CharField(max_length=100)),
                ('fieldType', models.CharField(choices=[('INPUT', 'INPUT'), ('OUTPUT', 'OUTPUT'), ('STATUS', 'STATUS'), ('ERROR', 'ERROR')], max_length=20)),
            ],
            bases=('dataglen.field',),
        ),
        migrations.CreateModel(
            name='SolarGroup',
            fields=[
                ('sensorgroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensorgroup')),
                ('group_type', models.CharField(blank=True, help_text='Group type (Ex. Rooms/Roofs)', max_length=100, null=True)),
                ('roof_type', models.CharField(blank=True, help_text='Roof Type', max_length=100, null=True)),
                ('tilt_angle', models.FloatField(blank=True, help_text='Tilt angle', null=True)),
                ('latitude', models.FloatField(blank=True, help_text='The latitude coordinates of the group/roof', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='The longitude coordinates of the group/roof', null=True)),
                ('azimuth', models.CharField(blank=True, help_text='orientation of the panels', max_length=100, null=True)),
                ('panel_manufacturer', models.CharField(blank=True, help_text='panel manufacturer', max_length=100, null=True)),
                ('panel_capacity', models.FloatField(blank=True, help_text='capacity of the group', null=True)),
                ('no_of_panels', models.IntegerField(blank=True, help_text='number of panels', null=True)),
                ('PV_panel_area', models.FloatField(default=0, help_text='Total PV area of group/roof in m2', null=True)),
                ('PV_panel_efficiency', models.FloatField(blank=True, default=0, help_text='Efficiency of the PV plant', null=True)),
                ('data_logger_device_id', models.CharField(blank=True, help_text='The gateway Id of data logger', max_length=100, null=True)),
                ('groupAJBs', models.ManyToManyField(blank=True, null=True, related_name='solar_groups', to='solarrms.ajb')),
                ('groupEnergyMeters', models.ManyToManyField(blank=True, null=True, related_name='solar_groups', to='solarrms.energymeter')),
                ('groupFeeders', models.ManyToManyField(blank=True, null=True, related_name='solar_groups', to='solarrms.feeder')),
                ('groupGatewaySources', models.ManyToManyField(blank=True, null=True, related_name='solar_groups', to='solarrms.gatewaysource')),
                ('groupIOSensors', models.ManyToManyField(blank=True, null=True, related_name='solar_groups', to='solarrms.iosensorfield')),
                ('groupIndependentInverters', models.ManyToManyField(blank=True, null=True, related_name='solar_groups', to='solarrms.independentinverter')),
                ('groupInverters', models.ManyToManyField(blank=True, null=True, related_name='solar_groups', to='solarrms.inverter')),
                ('groupPlantMetaSources', models.ManyToManyField(blank=True, null=True, related_name='solar_groups', to='solarrms.plantmetasource')),
            ],
            bases=('dataglen.sensorgroup',),
        ),
        migrations.CreateModel(
            name='SolarPlant',
            fields=[
                ('dataglengroup_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dashboards.dataglengroup')),
                ('capacity', models.FloatField(help_text='The capacity of the solar plant in KW')),
                ('location', models.CharField(help_text='The location of the plant (City, State)', max_length=250)),
                ('latitude', models.FloatField(blank=True, help_text='The latitude coordinates of the plant location', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='The latitude coordinates of the plant location', null=True)),
                ('commissioned_date', models.DateField(blank=True, help_text='The date the plant was commissioned', null=True)),
                ('feed_in_tariff', models.FloatField(blank=True, help_text='The feed in tariff for solar energy', null=True)),
                ('openweather', models.CharField(default=None, help_text='The location to be sent to openweather for weather information', max_length=50)),
                ('isOperational', models.BooleanField(default=False, help_text='The boolean flag that indicates if the plant is operational at present.')),
                ('evacuation_point', models.FloatField(blank=True, help_text='The feed in tariff for solar energy', null=True)),
                ('webdyn_device_id', models.CharField(blank=True, help_text='The gateway Id of webdyn', max_length=100, null=True)),
                ('ac_capacity', models.FloatField(blank=True, help_text='The ac capacity of the solar plant in KW', null=True)),
                ('elevation', models.FloatField(blank=True, help_text='The elevation of plant', null=True)),
                ('intermediate_client', models.CharField(blank=True, help_text='Name of the intermediate client of the plant, apart from the main client.', max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
                'ordering': ['name'],
                'abstract': False,
            },
            bases=('dashboards.dataglengroup',),
            managers=[
                ('tagged', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='WeatherStation',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('manufacturer', models.CharField(blank=True, help_text='Manufacturer name', max_length=100, null=True)),
                ('model', models.CharField(blank=True, help_text='Model of the weather Sensor', max_length=100, null=True)),
                ('displayName', models.CharField(help_text='The display name of the weather sensor', max_length=100)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_stations', to='solarrms.solarplant')),
                ('solar_groups', models.ManyToManyField(blank=True, null=True, related_name='weather_stations', to='solarrms.solargroup')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='VirtualGateway',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('manufacturer', models.CharField(max_length=100)),
                ('displayName', models.CharField(help_text='The display name of the virtual gateway', max_length=100)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='virtual_gateway_units', to='solarrms.solarplant')),
                ('solar_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_virtual_gateway_units', to='solarrms.solargroup')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='Transformer',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('manufacturer', models.CharField(max_length=100)),
                ('displayName', models.CharField(max_length=100)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transformers', to='solarrms.solarplant')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='SolarSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solar_section', to='solarrms.solarplant')),
                ('solar_groups', models.ManyToManyField(blank=True, null=True, related_name='solar_section', to='solarrms.solargroup')),
            ],
        ),
        migrations.CreateModel(
            name='SolarMetrics',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('displayName', models.CharField(help_text='The display name of the solar metric', max_length=100)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solar_metrics', to='solarrms.solarplant')),
                ('solar_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='solar_metrics', to='solarrms.solargroup')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.AddField(
            model_name='solargroup',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solar_groups', to='solarrms.solarplant'),
        ),
        migrations.AddField(
            model_name='plantmetasource',
            name='plant',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='solarrms.solarplant'),
        ),
        migrations.CreateModel(
            name='PlantFeaturesEnable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solar_metrics', models.BooleanField(default=True, help_text='Boolean parameter to determine, if the solar metrics should be shown or not.')),
                ('economic_benefits', models.BooleanField(default=False, help_text='Boolean parameter to determine, if the economic benefits should be shown or not.')),
                ('analytics', models.BooleanField(default=False, help_text='Boolean parameter to determine, if analytics should be shown or not.')),
                ('alerts', models.BooleanField(default=False, help_text='Boolean parameter to determine if the alarms/alerts should be shown or not')),
                ('reports', models.BooleanField(default=True, help_text='Boolean parameter to determine if the reports should be shown or not')),
                ('timeseries', models.BooleanField(default=True, help_text='Boolean parameter to determine if the timeseries data should be shown')),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='features_enabled', to='solarrms.solarplant')),
            ],
        ),
        migrations.CreateModel(
            name='PlantContractDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contract_date', models.DateField(blank=True, help_text='Date on which the contract was awarded.', null=True)),
                ('loi_date', models.DateField(blank=True, help_text='Date of LOI', null=True)),
                ('ppa_date', models.DateField(blank=True, help_text='Date of PPA signing', null=True)),
                ('commissioning_date', models.DateField(blank=True, help_text='Date of Commissioning', null=True)),
                ('contract_number', models.CharField(blank=True, help_text='contract number', max_length=100, null=True)),
                ('contract_release_date', models.DateField(blank=True, help_text='Date of Contract Release', null=True)),
                ('current_utility_tariff', models.FloatField(blank=True, help_text='Current Utility Tariff', null=True)),
                ('current_solar_tarrif', models.FloatField(blank=True, help_text='Current solar Tariff', null=True)),
                ('differential_pricing', models.FloatField(blank=True, help_text='Differential Pricing', null=True)),
                ('ppa_pricing', models.FloatField(blank=True, help_text='PPA price for showing economic benefits', null=True)),
                ('pricing_model', models.CharField(blank=True, help_text='capex / opex', max_length=100, null=True)),
                ('total_investment', models.FloatField(blank=True, help_text='Total investement in project', null=True)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contract_details', to='solarrms.solarplant')),
            ],
        ),
        migrations.CreateModel(
            name='PanelsString',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Name of the string', max_length=50, null=True)),
                ('orientation', models.FloatField(blank=True, help_text='Orientation of the string', max_length=50, null=True)),
                ('number_of_panels', models.IntegerField(blank=True, help_text='No of modules in this string', null=True)),
                ('tilt_angle', models.FloatField(blank=True, help_text='Tilt angle of this string', null=True)),
                ('mppt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='panels_strings', to='solarrms.mppt')),
            ],
        ),
        migrations.AddField(
            model_name='mppt',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mppt_units', to='solarrms.solarplant'),
        ),
        migrations.AddField(
            model_name='iosensorfield',
            name='plant_meta',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='io_sensors', to='solarrms.plantmetasource'),
        ),
        migrations.AddField(
            model_name='iosensorfield',
            name='solar_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_field', to='solarrms.solarfield'),
        ),
        migrations.CreateModel(
            name='InverterErrorCodes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('manufacturer', models.CharField(help_text='Manufacturer of the inverter', max_length=128)),
                ('model', models.CharField(help_text='Model of the inverter', max_length=128)),
                ('error_code', models.FloatField(help_text='Error Code')),
                ('error_description', models.CharField(blank=True, help_text='Error Description', max_length=256, null=True)),
                ('default_severity', models.CharField(blank=True, help_text='Severity of the error', max_length=256, null=True)),
                ('notes', models.CharField(blank=True, help_text='notes about the error', max_length=256, null=True)),
                ('grid_down', models.BooleanField(default=False)),
            ],
            options={
                'unique_together': {('manufacturer', 'model', 'error_code')},
            },
        ),
        migrations.AddField(
            model_name='inverter',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inverter_units', to='solarrms.solarplant'),
        ),
        migrations.AddField(
            model_name='independentinverter',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='independent_inverter_units', to='solarrms.solarplant'),
        ),
        migrations.AddField(
            model_name='gatewaysource',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gateway', to='solarrms.solarplant'),
        ),
        migrations.AddField(
            model_name='feeder',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feeder_units', to='solarrms.solarplant'),
        ),
        migrations.AddField(
            model_name='energymeter',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='energy_meters', to='solarrms.solarplant'),
        ),
        migrations.CreateModel(
            name='ClientContentsEnable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contents', jsonfield.fields.JSONField()),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contents_enabled', to='dashboards.dataglenclient')),
            ],
        ),
        migrations.CreateModel(
            name='CleaningTrigger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('string_name', models.CharField(max_length=100)),
                ('trigger_type', models.CharField(choices=[('cool', 'COOLING'), ('clean', 'CLEANING')], max_length=20)),
                ('present_state', models.CharField(choices=[('open', 'OPEN'), ('in_process', 'IN PROCESS'), ('finished', 'FINISHED')], max_length=20)),
                ('submitted_at', models.DateTimeField(auto_now=True)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('ajb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ajb_trigger', to='solarrms.ajb')),
                ('submitted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trigger_submitted_by', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='ajb',
            name='independent_inverter',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='ajb_units', to='solarrms.independentinverter'),
        ),
        migrations.AddField(
            model_name='ajb',
            name='plant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ajb_units', to='solarrms.solarplant'),
        ),
        migrations.CreateModel(
            name='AggregatedIndependentInverter',
            fields=[
                ('sensor_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='dataglen.sensor')),
                ('aggregated_independent_inverters', models.ManyToManyField(blank=True, null=True, related_name='aggregated_inverter_units', to='solarrms.independentinverter')),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='aggregated_inverter_units', related_query_name='aggregated_inverter_units', to='solarrms.solarplant')),
            ],
            bases=('dataglen.sensor',),
        ),
        migrations.CreateModel(
            name='TransformerStatusMappings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stream_name', models.CharField(choices=[('OTI', 'OTI'), ('WTI', 'WTI')], max_length=100)),
                ('status_code', models.FloatField()),
                ('status_description', models.CharField(max_length=256)),
                ('description_stream_name', models.CharField(choices=[('OTI_DESCRIPTION', 'OTI_DESCRIPTION'), ('WTI_DESCRIPTION', 'WTI_DESCRIPTION')], max_length=100)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transformer_status', to='solarrms.solarplant')),
            ],
            options={
                'unique_together': {('plant', 'stream_name', 'status_code')},
            },
        ),
        migrations.CreateModel(
            name='PVWatt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter_name', models.CharField(blank=True, choices=[('AC_ANNUAL', 'AC_ANNUAL'), ('SOLRAD_ANNUAL', 'SOLRAD_ANNUAL'), ('CAPACITY_FACTOR', 'CAPACITY_FACTOR'), ('AC_MONTHLY', 'AC_MONTHLY'), ('DC_MONTHLY', 'DC_MONTHLY'), ('SOLRAD_MONTHLY', 'SOLRAD_MONTHLY'), ('POA_MONTHLY', 'POA_MONTHLY')], max_length=100, null=True)),
                ('time_period_type', models.CharField(blank=True, choices=[('MONTH', 'MONTH'), ('YEAR', 'YEAR')], help_text='Time period for the parameter value such as MONTH/YEAR', max_length=100, null=True)),
                ('time_period_year_number', models.IntegerField(blank=True, default=0, help_text='Year for which the pvwatt value is specified.', null=True)),
                ('time_period_month_number', models.IntegerField(blank=True, choices=[(0, ' '), (1, 'JAN'), (2, 'FRB'), (3, 'MAR'), (4, 'APR'), (5, 'MAY'), (6, 'JUN'), (7, 'JUL'), (8, 'AUG'), (9, 'SEP'), (10, 'OCT'), (11, 'NOV'), (12, 'DEC')], help_text='Time period value such specific month name', null=True)),
                ('parameter_value', models.FloatField(blank=True, default=0, help_text='pvwatt parameter value', null=True)),
                ('unit', models.CharField(blank=True, max_length=100, null=True)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pvwatt_plants', to='solarrms.solarplant')),
                ('solar_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pvwatt_groups', to='solarrms.solargroup')),
            ],
            options={
                'unique_together': {('plant', 'solar_group', 'parameter_name', 'time_period_type', 'time_period_year_number', 'time_period_month_number')},
            },
        ),
        migrations.CreateModel(
            name='PVSystInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameterName', models.CharField(blank=True, choices=[('PRODUCED_ENERGY', 'PRODUCED_ENERGY'), ('SPECIFIC_PRODUCTION', 'SPECIFIC_PRODUCTION'), ('PERFORMANCE_RATIO', 'PERFORMANCE_RATIO'), ('NORMALISED_ENERGY_PER_DAY', 'NORMALISED_ENERGY_PER_DAY'), ('TILT_ANGLE', 'TILT_ANGLE'), ('GHI_IRRADIANCE', 'GHI_IRRADIANCE'), ('IN_PLANE_IRRADIANCE', 'IN_PLANE_IRRADIANCE')], max_length=100, null=True)),
                ('timePeriodType', models.CharField(blank=True, choices=[('MONTH', 'MONTH'), ('YEAR', 'YEAR')], help_text='Time period for the parameter value such as MONTH/YEAR', max_length=100, null=True)),
                ('timePeriodDay', models.IntegerField(blank=True, default=0, help_text='Year for which the pvsyst value is specified.', null=True)),
                ('timePeriodValue', models.IntegerField(blank=True, choices=[(0, ' '), (1, 'JAN'), (2, 'FRB'), (3, 'MAR'), (4, 'APR'), (5, 'MAY'), (6, 'JUN'), (7, 'JUL'), (8, 'AUG'), (9, 'SEP'), (10, 'OCT'), (11, 'NOV'), (12, 'DEC')], help_text='Time period value such specific month name', null=True)),
                ('timePeriodYear', models.IntegerField(blank=True, default=0, help_text='Year for which the pvsyst value is specified.', null=True)),
                ('parameterValue', models.FloatField(blank=True, default=0, help_text='PVSyst parameter value', null=True)),
                ('unit', models.CharField(blank=True, max_length=100, null=True)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pvsyst_info', to='solarrms.solarplant')),
                ('solar_group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='group_pvsyst', to='solarrms.solargroup')),
            ],
            options={
                'unique_together': {('plant', 'solar_group', 'parameterName', 'timePeriodType', 'timePeriodDay', 'timePeriodValue', 'timePeriodYear')},
            },
        ),
        migrations.CreateModel(
            name='MeterStatusMappings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stream_name', models.CharField(choices=[('CIRCUIT_BREAKER_STATUS1', 'CIRCUIT_BREAKER_STATUS1'), ('CIRCUIT_BREAKER_STATUS2', 'CIRCUIT_BREAKER_STATUS2')], max_length=100)),
                ('status_code', models.FloatField()),
                ('status_description', models.CharField(max_length=256)),
                ('description_stream_name', models.CharField(choices=[('CIRCUIT_BREAKER_STATUS1_DESCRIPTION', 'CIRCUIT_BREAKER_STATUS1_DESCRIPTION'), ('CIRCUIT_BREAKER_STATUS2_DESCRIPTION', 'CIRCUIT_BREAKER_STATUS2_DESCRIPTION')], max_length=100)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meter_status', to='solarrms.solarplant')),
            ],
            options={
                'unique_together': {('plant', 'stream_name', 'status_code')},
            },
        ),
        migrations.CreateModel(
            name='InverterStatusMappings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stream_name', models.CharField(choices=[('SOLAR_STATUS', 'SOLAR_STATUS'), ('INVERTER_FAILURE', 'INVERTER_FAILURE'), ('ALARM_ACTIVE', 'ALARM_ACTIVE')], max_length=100)),
                ('status_code', models.FloatField()),
                ('status_description', models.CharField(max_length=256)),
                ('description_stream_name', models.CharField(choices=[('SOLAR_STATUS_DESCRIPTION', 'SOLAR_STATUS_DESCRIPTION'), ('INVERTER_FAILURE_DESCRIPTION', 'INVERTER_FAILURE_DESCRIPTION'), ('ALARM_ACTIVE_DESCRIPTION', 'ALARM_ACTIVE_DESCRIPTION')], max_length=100)),
                ('generating', models.BooleanField(default=False)),
                ('dual_status', models.BooleanField(default=False)),
                ('grid_down', models.BooleanField(default=False)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='solar_status', to='solarrms.solarplant')),
            ],
            options={
                'unique_together': {('plant', 'stream_name', 'status_code')},
            },
        ),
        migrations.CreateModel(
            name='AJBStatusMappings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stream_name', models.CharField(choices=[('DI_STATUS_1', 'DI_STATUS_1'), ('DI_STATUS_2', 'DI_STATUS_2'), ('DI_STATUS_3', 'DI_STATUS_3'), ('DI_STATUS_4', 'DI_STATUS_4'), ('DI_STATUS_5', 'DI_STATUS_5'), ('DO_STATUS_1', 'DO_STATUS_1'), ('DO_STATUS_2', 'DO_STATUS_2')], max_length=100)),
                ('status_code', models.FloatField()),
                ('status_description', models.CharField(max_length=256)),
                ('description_stream_name', models.CharField(choices=[('DI_STATUS_1_DESCRIPTION', 'DI_STATUS_1_DESCRIPTION'), ('DI_STATUS_2_DESCRIPTION', 'DI_STATUS_2_DESCRIPTION'), ('DI_STATUS_3_DESCRIPTION', 'DI_STATUS_3_DESCRIPTION'), ('DI_STATUS_4_DESCRIPTION', 'DI_STATUS_4_DESCRIPTION'), ('DI_STATUS_5_DESCRIPTION', 'DI_STATUS_5_DESCRIPTION'), ('DO_STATUS_1_DESCRIPTION', 'DO_STATUS_1_DESCRIPTION'), ('DO_STATUS_2_DESCRIPTION', 'DO_STATUS_2_DESCRIPTION')], max_length=100)),
                ('plant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ajb_status', to='solarrms.solarplant')),
            ],
            options={
                'unique_together': {('plant', 'stream_name', 'status_code')},
            },
        ),
    ]
